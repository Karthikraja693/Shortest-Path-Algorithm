my_graph = my_graph = {
    'A': [('B', 5), ('C', 3), ('E', 11)],
    'B': [('A', 5), ('C', 1), ('F', 2)],
    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 9), ('F', 3)],
    'E': [('A', 11), ('C', 5), ('D', 9)],
    'F': [('B', 2), ('D', 3)]
}
def shortest_path(graph, start,target = ''):
    unvisited = list(graph)
    distances = {node: 0 if node == start else float('inf') for node in graph}
    paths = {node: [] for node in graph}
    paths[start].append(start)
    
    while unvisited:
        current = min(unvisited, key=distances.get)
        for node, distance in graph[current]:

# 2. if distance + distances[current] < distances[node]:
# What is distance + distances[current]?
# This is calculating a new possible path to reach the neighbor node.
# distance: cost to reach the neighbor from current
# distances[current]: cost to reach current from the start
# So distance + distances[current] = total cost from start → current → neighbor
# What does the condition check?
# “Is this new path to the neighbor shorter than what I currently know?”

If yes, then we update that shorter path.
            if distance + distances[current] < distances[node]:
                distances[node] = distance + distances[current]

#if paths['C'] and paths['C'][-1] == 'C':   # True, because paths['C'] = ['A', 'D', 'C']
#paths['C'] = paths['B'][:]  # paths['C'] is now ['A', 'B']
#paths['C'].append('C')      # paths['C'] becomes ['A', 'B', 'C']
#Old path ['A', 'D', 'C'] is replaced with the new shorter path ['A', 'B', 'C'].

                if paths[node] and paths[node][-1] == node:
                    paths[node] = paths[current][:]
                else:
                    paths[node].extend(paths[current])
                paths[node].append(node)
        unvisited.remove(current)
    
    targets_to_print = [target] if target else graph
    for node in targets_to_print:
        if node == start:
            continue
        print(f'\n{start}-{node} distance: {distances[node]}\nPath: {" -> ".join(paths[node])}')
    return distances, paths
  
